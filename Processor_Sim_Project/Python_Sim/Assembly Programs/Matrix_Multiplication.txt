// multiply the following matricies
//B = [3  5  6 43 5 45
//     90 4 34 59 8 54
//     24 5 78  0 0 23
//     24 68 4  1 3 0 ]

//C = [3  5  6 43 
//     65 87 9  5
//     0  46 44 8
//     11 22 3  0
//     34 59 8 54
//      6 43 5 45]

//A = B * C
//A = (9x4) * (4x9) = 4x4

//A = [1247	3902	721	2497
//     1775	6454	2583	7024
//     535	5132	3736	2716
//     4605	6419	959	1566]

//initialise memory counter
ADD r1, r0, r0

//store B
ADD r3, r0, r1

ADDI r2, r0, 3
STR r2, r0, r1
ADDI r1, r1, 1
ADDI r2, r0, 5
STR r2, r0, r1
ADDI r1, r1, 1
ADDI r2, r0, 6
STR r2, r0, r1
ADDI r1, r1, 1
ADDI r2, r0, 43
STR r2, r0, r1
ADDI r1, r1, 1
ADDI r2, r0, 5
STR r2, r0, r1
ADDI r1, r1, 1
ADDI r2, r0, 45
STR r2, r0, r1
ADDI r1, r1, 1

ADDI r2, r0, 90
STR r2, r0, r1
ADDI r1, r1, 1
ADDI r2, r0, 4
STR r2, r0, r1
ADDI r1, r1, 1
ADDI r2, r0, 34
STR r2, r0, r1
ADDI r1, r1, 1
ADDI r2, r0, 59
STR r2, r0, r1
ADDI r1, r1, 1
ADDI r2, r0, 8
STR r2, r0, r1
ADDI r1, r1, 1
ADDI r2, r0, 54
STR r2, r0, r1
ADDI r1, r1, 1

ADDI r2, r0, 24
STR r2, r0, r1
ADDI r1, r1, 1
ADDI r2, r0, 5
STR r2, r0, r1
ADDI r1, r1, 1
ADDI r2, r0, 78
STR r2, r0, r1
ADDI r1, r1, 1
ADDI r2, r0, 0
STR r2, r0, r1
ADDI r1, r1, 1
ADDI r2, r0, 0
STR r2, r0, r1
ADDI r1, r1, 1
ADDI r2, r0, 23
STR r2, r0, r1
ADDI r1, r1, 1

ADDI r2, r0, 24
STR r2, r0, r1
ADDI r1, r1, 1
ADDI r2, r0, 68
STR r2, r0, r1
ADDI r1, r1, 1
ADDI r2, r0, 4
STR r2, r0, r1
ADDI r1, r1, 1
ADDI r2, r0, 1
STR r2, r0, r1
ADDI r1, r1, 1
ADDI r2, r0, 3
STR r2, r0, r1
ADDI r1, r1, 1
ADDI r2, r0, 0
STR r2, r0, r1
ADDI r1, r1, 1

//seperate matricies in memory
ADDI r1, r1, 1

//store C
ADD r4, r0, r1

ADDI r2, r0, 3
STR r2, r0, r1
ADDI r1, r1, 1
ADDI r2, r0, 5
STR r2, r0, r1
ADDI r1, r1, 1
ADDI r2, r0, 6
STR r2, r0, r1
ADDI r1, r1, 1
ADDI r2, r0, 43
STR r2, r0, r1
ADDI r1, r1, 1

ADDI r2, r0, 65
STR r2, r0, r1
ADDI r1, r1, 1
ADDI r2, r0, 87
STR r2, r0, r1
ADDI r1, r1, 1
ADDI r2, r0, 9
STR r2, r0, r1
ADDI r1, r1, 1
ADDI r2, r0, 5
STR r2, r0, r1
ADDI r1, r1, 1

ADDI r2, r0, 0
STR r2, r0, r1
ADDI r1, r1, 1
ADDI r2, r0, 46
STR r2, r0, r1
ADDI r1, r1, 1
ADDI r2, r0, 44
STR r2, r0, r1
ADDI r1, r1, 1
ADDI r2, r0, 8
STR r2, r0, r1
ADDI r1, r1, 1

ADDI r2, r0, 11
STR r2, r0, r1
ADDI r1, r1, 1
ADDI r2, r0, 22
STR r2, r0, r1
ADDI r1, r1, 1
ADDI r2, r0, 3
STR r2, r0, r1
ADDI r1, r1, 1
ADDI r2, r0, 0
STR r2, r0, r1
ADDI r1, r1, 1

ADDI r2, r0, 34
STR r2, r0, r1
ADDI r1, r1, 1
ADDI r2, r0, 59
STR r2, r0, r1
ADDI r1, r1, 1
ADDI r2, r0, 8
STR r2, r0, r1
ADDI r1, r1, 1
ADDI r2, r0, 54
STR r2, r0, r1
ADDI r1, r1, 1

ADDI r2, r0, 6
STR r2, r0, r1
ADDI r1, r1, 1
ADDI r2, r0, 43
STR r2, r0, r1
ADDI r1, r1, 1
ADDI r2, r0, 5
STR r2, r0, r1
ADDI r1, r1, 1
ADDI r2, r0, 45
STR r2, r0, r1
ADDI r1, r1, 1


//main loop added around core core (i.e. not initialising memory) to get a better ILP average
//r31 used for loop max, r30 used for loop counter
ADDI r31, r0, 100
ADD r30, r0, r0
Main:

//r3 and r4 are start memory addresses of B and C respectivly (set earlier)

//r1 = matrix A start address (6*4)+(6*4)+1+1 = 50
ADDI r1, r0, 50

//r5 = i
ADD r5, r0, r0
//r6 = j
ADD r6, r0, r0
//r7 = loop max value for comparison: 4 as are 4 rows in B, 4 columns in C
ADDI r7, r0, 4

//r8-r13 = current row of B
//r14-r19 = current column of C

//b = i*offset + 0 + 1 + 2 + 3 + 4 + 5 . .
//c = (offset*0) + j, (offset * 1) + j ...

LoadBVals:
//B index = (r20), C index = (r21)
// Load Matricies into registers
//get B - start index [r3 + load counter + (i*6)]
MULI r20, r5, 6
LD r8, r3, r20
ADDI r20, r20, 1
LD r9, r3, r20
ADDI r20, r20, 1
LD r10, r3, r20
ADDI r20, r20, 1
LD r11, r3, r20
ADDI r20, r20, 1
LD r12, r3, r20
ADDI r20, r20, 1
LD r13, r3, r20
BR LoadCVals


LoadCVals:
//r2 = 4
ADDI r2, r0, 4
//get C - start index [r4 + j + (loadcounter * 4)]
MULI r21, r2, 0
ADD r21, r21, r6
LD r14, r4, r21
MULI r21, r2, 1
ADD r21, r21, r6
LD r15, r4, r21
MULI r21, r2, 2
ADD r21, r21, r6
LD r16, r4, r21
MULI r21, r2, 3
ADD r21, r21, r6
LD r17, r4, r21
MULI r21, r2, 4
ADD r21, r21, r6
LD r18, r4, r21
MULI r21, r2, 5
ADD r21, r21, r6
LD r19, r4, r21
BR Loop

 
Loop:
//r20-r25 = current A parts
//r26 = A to store
ADD r26, r0, r0
MUL r20, r8, r14
MUL r21, r9, r15
MUL r22, r10, r16
MUL r23, r11, r17
MUL r24, r12, r18
MUL r25, r13, r19
ADD r26, r26, r20
ADD r26, r26, r21
ADD r26, r26, r22
ADD r26, r26, r23
ADD r26, r26, r24
ADD r26, r26, r25

STR r26, r1, r0
ADDI r1, r1, 1
ADDI r6, r6, 1
//if j = 4, load new C column
BLT r6, r7, LoadCVals
//else i++ j=0, load all values
ADDI r5, r5, 1
ADD r6, r0, r0
BLT r5, r7, LoadBVals
BR End


End:
ADDI r30, r30, 1
BLT r30, r31, Main
HALT








